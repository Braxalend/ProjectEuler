# -*- coding: utf-8 -*-
"""
Квадратичные простые числа
Эйлер опубликовал свою замечательную квадратичную формулу:

n2+n+41
Оказалось, что согласно данной формуле можно получить 40 простых чисел, последовательно подставляя значения 0≤n≤39.
Однако, при n=40, 402+40+41=40(40+1)+41 делится на 41 без остатка, и, очевидно, при n=41,412+41+41
делится на 41 без остатка.

При помощи компьютеров была найдена невероятная формула n2−79n+1601, согласно которой можно получить 80 простых
чисел для последовательных значений n от 0 до 79. Произведение коэффициентов −79 и 1601 равно −126479.

Рассмотрим квадратичную формулу вида:

n2+an+b, где |a|<1000 и |b|≤1000

где |n| является модулем (абсолютным значением) n.
К примеру, |11|=11 и |−4|=4
Найдите произведение коэффициентов a и b квадратичного выражения, согласно которому можно получить максимальное
количество простых чисел для последовательных значений n, начиная со значения n=0.
"""

from math import sqrt

def is_prime(n):
    if n <= 1: return False
    if n <= 3: return True
    if n%2==0 or n%3 == 0: return False
    r = int(sqrt(n))
    f = 5
    while f*f < n:
        if n%f == 0 or n%(f+2) == 0: return False
        f+= 6
    return True

def prime_sieve(n):
    sieve = [True] * (n//2)
    for i in range(3,int(n**0.5)+1,2):
        if sieve[i//2]:
            sieve[i*i//2::i] = [False] * ((n-i*i-1)//(2*i)+1)
    return [2] + [2*i+1 for i in range(1,n//2) if sieve[i]]

l = 1000
nmax = 0
for b in prime_sieve(l+1):
    for a in range(-b+2, 0, 2):
        n = 1
        while is_prime(n*n + a*n + b): n+= 1
        if n>nmax: nmax, p = n, (a,b)

print ('a * b = {0} * {1} = {2}').format(p[0], p[1], p[0]*p[1])


